@namespace TimeWise.Shared.Sections

@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using TimeWise.Data.Scheduler;

@inject IJSRuntime JS

<div>
    <div class="flex flex-column align-center mb-8">
        <MudRating HoveredValueChanged="HandleHoveredValueChanged" Size="Size.Large" SelectedValueChanged="RatingChanged" />
        <MudText Typo="Typo.subtitle1" Class="blue-600 mt-2">@LabelText</MudText>
    </div>
    <div class="grid md:grid-cols-3 gap-4 mb-8">
        <div>
            <MudTextField @bind-Value="personName" Variant="Variant.Outlined" Label="Your name" Margin="Margin.Dense" />
        </div>
        <div>
            <MudSelect T="string" Label="Role" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="personRole" Margin="Margin.Dense">
                <MudSelectItem Value="@("Founder")" />
                <MudSelectItem Value="@("Manager")" />
                <MudSelectItem Value="@("Project Manager")" />
                <MudSelectItem Value="@("School Management")" />
                <MudSelectItem Value="@("Student")" />
                <MudSelectItem Value="@("Other")" />
            </MudSelect>
        </div>
        <div>
            <MudTextField @bind-Value="feedback" Variant="Variant.Outlined" Label="Feedback" Margin="Margin.Dense" />
        </div>
    </div>
    <MudButton Color="Color.Primary" OnClick="SubmitFeedback" Class="rounded-lg w-full" Variant="Variant.Filled" Disabled="selectedStarVal == 0">
        Submit
    </MudButton>
</div>

@code {
    private int previousStarVal = 0;
    private int selectedStarVal = 0;
    private int? activeStarVal;

    private string previousPersonName = "";
    private string personName = "";
    private string personRole = "Manager";
    private string feedback = "";

    private async Task SubmitFeedback() {

        UserRatings ro = await UsageFileLoader.LoadFileAsync();

        if (personName.Trim() == "") personName = "User #" + (ro.TotalUsers+1).ToString();

        if (ro.RatingUsers.ContainsKey(previousPersonName)) {
            ro = UpdateExistingUser(ro);
        } else {
            ro = AddUser(ro);
        }
        

        if (selectedStarVal != previousStarVal)
        {
            ro = UpdateSummedRatings(ro);
        }

        await UsageFileLoader.SaveFileAsync(ro);

        previousPersonName = personName;
        previousStarVal = selectedStarVal;
    }

    private UserRatings UpdateSummedRatings(UserRatings ro)
    {
        if (previousStarVal != 0) ro.Ratings[previousStarVal-1]--;
        ro.Ratings[selectedStarVal-1]++;
        return ro;
    }

    private UserRatings UpdateExistingUser(UserRatings ro)
    {
        if (previousPersonName.Trim() != "" && previousPersonName != personName) {
            ro.RatingUsers.Remove(previousPersonName);
            ro.RatingUsers[personName] = new RatingUser();
        }

        ro.RatingUsers[personName].Rating = selectedStarVal;
        ro.RatingUsers[personName].Role = personRole;
        ro.RatingUsers[personName].Feedback = feedback;

        return ro;
    }

    private UserRatings AddUser(UserRatings ro)
    {
        ro.RatingUsers[personName] = new RatingUser();
        ro.RatingUsers[personName].Rating = selectedStarVal;
        ro.RatingUsers[personName].Role = personRole;
        ro.RatingUsers[personName].Feedback = feedback;

        return ro;
    }

    // ux ratings

    private void RatingChanged(int val)
    {
        selectedStarVal = val;
    }

    private void HandleHoveredValueChanged(int? val)
    {
        activeStarVal = val;
    }

    private string LabelText => (activeStarVal ?? selectedStarVal) switch
    {
        1 => "Very bad",
        2 => "Bad",
        3 => "Sufficient",
        4 => "Good",
        5 => "Awesome!",
        _ => "Rate our product!"
    };

    // auto

    private async Task incrementUserCount()
    {
        if (await JS.InvokeAsync<string>("sessionStorageInterop.getItem", "incrementedUserCount") == "true") return;

        UserRatings ro = await UsageFileLoader.LoadFileAsync();
        ro.TotalUsers++;
        await UsageFileLoader.SaveFileAsync(ro);

        await JS.InvokeVoidAsync("sessionStorageInterop.setItem", "incrementedUserCount", "true");
    }

    protected override async Task OnInitializedAsync()
    {
        UserRatings ro = await UsageFileLoader.LoadFileAsync();
        personName = "User #" + (ro.TotalUsers+1).ToString();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender) return;

        await incrementUserCount();
    }
}
