@namespace TimeWise.Shared.Scheduler
@using MudBlazor
@using TimeWise.Pages
@using System.Reflection
@using System.Collections.Generic
@using TimeWise.Data.Scheduler

<div class="" aria-orientation="horizontal">
    <div style="min-height: 10rem; overflow-x:auto;" class="flex flex-column">
        <MudButton Class="bg-btnPrimary rounded-lg w-full text-sm md:text-base" Variant="Variant.Filled" Color="Color.Secondary" Disabled="collection.Count == 0" OnClick="RemoveSelected" StartIcon="@Icons.Material.Filled.Remove">
            Selected @tableName
        </MudButton>


        <MudList>
            @if (collection != null && collection.Count > 0){
                @for(int i = 1; i < collection.Count + 1; i++) {
                    <SchedulerTableItem AssociatedInstance="collection[i - 1]" OnAssociatedInstanceChanged="instance => InstanceUpdate(instance,i)" SelectedIndex="@SelectedIndex" OnIndexSelected="SelectedIndexChangedHandler" column="@tableName" columnIndex="@i"></SchedulerTableItem>
                }
            }
        </MudList>

        <MudButton Class="bg-btnPrimary rounded-lg w-full" Variant="Variant.Filled" Color="Color.Secondary" OnClick="AddNew" StartIcon="@Icons.Material.Filled.Add">
            @tableName
        </MudButton>
    </div>
</div>

@code {
    [Parameter]
    public string tableName {get; set;} = default!;

    [Parameter]
    public EventCallback<(List<dynamic>,string)> CollectionChanged {get;set;}

    [Parameter]
    public List<dynamic> collection {get; set;} = default!;

    [Parameter]
    public int SelectedIndex {get; set;}

    [Parameter]
    public Type InstanceType { get; set; } = default!;

    [Parameter]
    public EventCallback<(int,string)> IndexChanged {get;set;}

    private async Task SelectedIndexChangedHandler(int selectedIndex) {
        SelectedIndex = selectedIndex;
        await IndexChanged.InvokeAsync((SelectedIndex,tableName));
    }

    [Parameter]
    public bool UseFirstForNew { get; set; } = false;

    private async Task AddNew(EventArgs args){
        if(collection is not null){
            if(tableName == "Day" && collection.Count >= 7) return;
            if(UseFirstForNew && collection.Count > 0)
            {
                collection.Add(collection[0]);
                await CollectionChanged.InvokeAsync((collection, tableName));
                return;
            }
            collection.Add(Activator.CreateInstance(InstanceType)!);
            await CollectionChanged.InvokeAsync((collection,tableName));
        }
    }

    private async Task RemoveSelected(EventArgs args){
        if(collection is null) return;
        if (collection.Count != 0)
        {
            if (collection.Count < SelectedIndex) return;
            collection.RemoveAt(SelectedIndex);
            if(SelectedIndex != 0)
            {
                SelectedIndex -= 1;
            }
            await IndexChanged.InvokeAsync((SelectedIndex,tableName));
            await CollectionChanged.InvokeAsync((collection, tableName));
        }
    }


    private async Task InstanceUpdate(dynamic instance, int index)
    {
        collection[index - 2] = instance;
        await CollectionChanged.InvokeAsync((collection, tableName));
    }

}
