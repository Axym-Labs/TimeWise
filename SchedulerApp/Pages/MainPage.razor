@namespace SchedulerApp.Pages
@page "/"
@using SchedulerApp.Modules
@inject ContentStorage content
@using MudBlazor
@using SchedulerApp.Shared.Sections
@using SchedulerApp.Shared
@using SchedulerApp.Pages
@using SchedulerApp.Shared.BaseUI.btn

@inject Constants constants

<PageTitle>SchedulerApp</PageTitle>

<HeroSection title="SchedulerApp" description="Generate optimal schedules for your workers."
    imageLoc="/static/img/sample.png">
    <PrimaryLinkBtn link="/scheduler" t="Try now" />
</HeroSection>

<div style="margin: 50px 300px; text-align: center;">
    <MudPaper Elevation="5" Style="background: #2A3439; margin: 0 auto;" Class="rounded-lg">
        <MudText Typo="Typo.h3">Introduction</MudText>
    </MudPaper>
    <MudPaper Elevation="5" Style="background: #2A3439; margin: 0 auto;" Class="rounded-lg mt-6 pa-4">
        <MudText Typo="Typo.body1" Style="text-align:left;">
            This scheduler is based on ILP (integer linear programming) and allows for optimal distribution of shifts among workers and guarantees an optimal solution (within constraints).
            It allows for complete control of the proccess and has adaptable constraints and objectives as well as a simple UI to allow for fast, replicable results.
            In the following I will explain functionality of the different components
        </MudText>
    </MudPaper>

    <MudGrid Spacing="4" Justify="Justify.Center">
        <MudItem xs="6">
            <MudPaper Class="pa-2 mt-4">
                <MudText Typo="Typo.h5">Importers & Exporters</MudText>
                <MudText Typo="Typo.body1" >
                    You can use the in-built in and exporters for a given problem as well as for a solution to use in Excel or other tools to boost your productivity
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Class="pa-2 mt-4">
                <MudText Typo="Typo.h5">In-built Filters</MudText>
                <MudText Typo="Typo.body1" >
                    The scheduler provides a UI for displaying a work schedule, as well as functions to filter by name
                </MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>


    <MudPaper Elevation="5" Style="background: #2A3439; margin: 0 auto;" Class="rounded-lg mt-6">
        <MudText Typo="Typo.h3">How it works</MudText>
    </MudPaper>
    <MudPaper Elevation="5" Style="background: #2A3439; margin: 0 auto;" Class="rounded-lg mt-6 pa-4">
        <MudText Typo="Typo.body1" Style="">
            The scheduler follows a simple structure where every week has days, every day has time slots and every time slot has shifts.
            The time slots specifically are an abstraction to allow for multiple concurrent shifts. <br />
            To illustrate this point lets think of a hospital where we need a schedule.
            The hospital has 3 major working blocks each day (namely: early, late and night shifts). In every working block of 
            eight hours both the ER and OR need to be staffed. I.e. the working blocks are represented by time slots, while the shifts 
            could account for different workplaces or differing departments when sharing one worker pool.
        </MudText>
    </MudPaper>

    <MudPaper Elevation="5" Style="background: #2A3439; margin: 0 auto;" Class="rounded-lg mt-6">
        <MudText Typo="Typo.h3">The Parameters</MudText>
    </MudPaper>
    <MudPaper Elevation="5" Style="background: #2A3439; margin: 0 auto;" Class="rounded-lg mt-6 pa-4">
        <MudText Typo="Typo.body1" Style="">
            There a couple of parameters one can access in the scheduler. The most important being the options represented by the checkmarks.
            By default it is recommended to keep all constraints on unless you know exactly what you want to achieve.
        </MudText>
    </MudPaper>
</div>




@code {
    protected override void OnInitialized()
    {
        dynamic landingPage = content.files["main"];

    }
}

