@namespace SchedulerApp.Pages
@page "/scheduler"

@using SchedulerApp.Shared.Scheduler
@using SchedulerApp.Shared.BaseUI.btn
@using SchedulerApp.Data.Scheduler
@using SchedulerApp.Modules
@using SchedulerApp.Shared

@using MudBlazor
@using Newtonsoft.Json

@inject SchedulingAPIService sAPIs
@inject Constants constants
@inject ContentStorage content
@inject Exporter exporter

<SchedulerSection title="Start">
    <ImporterView ProblemScope="ProblemScope" OnProblemScopeChanged="value => ProblemScope = value" />
</SchedulerSection>

<SchedulerSection title="Add employees">
    <EmployeePlanner Employees="ProblemScope.Problem.Workers" OnEmployeesChanged="employees => ProblemScope.Problem.Workers = employees" />
</SchedulerSection>

<SchedulerSection title="Customize scheduling options">
    <SchedulingOptionsInputs Options="ProblemScope.Problem.Options" OnOptionsChanged="value => ProblemScope.Problem.Options = value" />

@*    <MudNumericField Variant="Variant.Filled" Label="Maximum working hours" T="double" @bind-Value="ProblemScope.Problem.MaxHoursPerWeek" Min="0" Max="100" />
*@    

    <MudSlider @bind-Value="ProblemScope.Problem.MaxHoursPerWeek" Color="Color.Info" Variant="Variant.Filled" Min="0" Max="120">
        Maximum working hours: @ProblemScope.Problem.MaxHoursPerWeek
    </MudSlider>
</SchedulerSection>

<SchedulerSection title="Add Slots">
    <SchedulerSlots ProblemScope="ProblemScope" ProblemScopeChanged="value => ProblemScope = value"/>
</SchedulerSection>

<SchedulerSection title="Solution View">
    <MudButton OnClick="_ => FetchSolution()" Variant="Variant.Filled">Get Solution</MudButton>
    <SolutionDisplay Solution="solution" Problem="ProblemScope.Problem"/>
</SchedulerSection>

<SchedulerSection title="Export solution">
    <ExporterView ProblemScope="ProblemScope" OnProblemScopeChanged="value => ProblemScope = value"/>
</SchedulerSection>

@code {
    private ProblemScope ProblemScope = new ProblemScope();

    private Solution? solution = null;

    private async Task FetchSolution()
    {
        solution = await sAPIs.GetSolution(ProblemScope.Problem);
    }

    protected override void OnInitialized()
    {
        dynamic schedulingPage = content.files["schedulingPage"];
    }

}
