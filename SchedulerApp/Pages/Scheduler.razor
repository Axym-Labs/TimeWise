@namespace SchedulerApp.Pages
@page "/scheduler"

@using SchedulerApp.Shared.Scheduler
@using SchedulerApp.Shared.BaseUI.btn
@using SchedulerApp.Data.Scheduler
@using SchedulerApp.Modules
@using SchedulerApp.Shared

@using MudBlazor
@using Newtonsoft.Json

@inject ISnackbar Snackbar
@inject SchedulingAPIService sAPIs
@inject Constants constants
@inject ContentStorage content
@inject Exporter exporter


@if (showLoadingCircle)
{
    <div style="position:fixed; top:0; left:0; width:100%; height:100%; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center;align-items: center; z-index: 9999;">
        <div class="d-flex flex-column" style="align-items:center;">
            <MudText Typo="Typo.h2">Connecting to the Scheduling API</MudText>
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
        </div>
    </div>
}
@if(DisplayConnectionError)
{
    <MudAlert Severity="Severity.Error">The connection to the API could not be established. You can only import Schedules, not generate them on this version of the page. If you want to generate a new schedule, try again later.</MudAlert>
}
<SchedulerSection title="Optional: Import">
    <p class="mb-3">If you have a saved schedule as JSON, you can import it here to view/edit it, and export it afterwards.</p>
    <ImporterView ProblemScope="ProblemScope" OnProblemScopeChanged="value => ProblemScope = value" />
</SchedulerSection>

<SchedulerSection title="Add employees">
    <EmployeePlanner Employees="ProblemScope.Problem.Workers" OnEmployeesChanged="employees => ProblemScope.Problem.Workers = employees" />
</SchedulerSection>

<SchedulerSection title="Customize scheduling options">
    <div class="mb-4">
        <SchedulingOptionsInputs Options="ProblemScope.Problem.Options" OnOptionsChanged="value => ProblemScope.Problem.Options = value" />
    </div>

@*    <MudNumericField Variant="Variant.Filled" Label="Maximum working hours" T="double" @bind-Value="ProblemScope.Problem.MaxHoursPerWeek" Min="0" Max="100" />
*@    

    <MudSlider @bind-Value="ProblemScope.Problem.MaxHoursPerWeek" Color="Color.Info" Variant="Variant.Filled" Min="0" Max="120" Class="px-5">
        Maximum weekly working hours: @ProblemScope.Problem.MaxHoursPerWeek
    </MudSlider>
</SchedulerSection>

<SchedulerSection title="Add Slots">
    <SchedulerSlots ProblemScope="ProblemScope" ProblemScopeChanged="value => ProblemScope = value"/>
</SchedulerSection>

<SchedulerSection title="Solution View">
    <div class="d-flex flex-row mb-5">
        <MudButton Color="Color.Primary" OnClick="_ => FetchSolution()" Class="w-full" Variant="Variant.Filled">
            @if (showSolutionLoadingCircle)
            {
                <MudProgressCircular Color="Color.Primary" Style="height: 100%;" Indeterminate="true" Class="ml-5"/>
            } else
            {
                <p>Generate Solution</p>
            }
        </MudButton>
    </div>
    <SolutionDisplay Solution="solution" Problem="ProblemScope.Problem"/>
</SchedulerSection>

<SchedulerSection title="Export Schedule">
    <ExporterView ProblemScope="ProblemScope" OnProblemScopeChanged="value => ProblemScope = value"/>
</SchedulerSection>

@code {
    private ProblemScope ProblemScope = new ProblemScope();

    private Solution? solution = null;

    private bool showLoadingCircle = true;
    private bool showSolutionLoadingCircle = false;
    private bool DisplayConnectionError = false;
    private string Version = string.Empty;

    private async Task FetchSolution()
    {
        showSolutionLoadingCircle = true;
        solution = await sAPIs.GetSolution(ProblemScope.Problem);
        showSolutionLoadingCircle = false;

        if (solution == null)
        {
            Snackbar.Add("Schedule could not be generated. Try completing and sanitizing your inputs.");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var version = await sAPIs.GetAPIVersion();
        if(version is null)
        {
            showLoadingCircle = false;
            DisplayConnectionError = true;
        }
        else
        {
            showLoadingCircle = false;
            Version = version;
        }
        
        dynamic schedulingPage = content.files["schedulingPage"];
    }

}
