@namespace SchedulerApp.Shared.Scheduler
@using MudBlazor
@using Newtonsoft.Json
@using SchedulerApp.Shared.Scheduler
@using System.Collections.Generic
@using SchedulerApp.Data.Scheduler
@using SchedulerApp.Modules
@using MudBlazorFix

@inject SchedulingAPIService sAPIs
@inject ISnackbar Snackbar

<div>
    <div>
        <div>
            <MudSwitch Label="Duplicate days of week?" Color="Color.Info" @bind-Checked="UseFirstForNewWeek" />
            <MudSwitch Label="Duplicate time slots in day?" Color="Color.Info" @bind-Checked="UseFirstForNewDay" />
        </div>

        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
            <SchedulerSlotsColumn SelectedIndex="@SelectedWeek" IndexChanged="OnIndexChanged" CollectionChanged="OnScheduleChanged" tableName="Week" collection="@weekCollection" InstanceType="typeof(Week)" UseFirstForNew="@UseFirstForNewWeek" />
            <SchedulerSlotsColumn SelectedIndex="@SelectedDay" IndexChanged="OnIndexChanged" CollectionChanged="OnScheduleChanged" tableName="Day" collection="@dayCollection" InstanceType="typeof(Day)" UseFirstForNew="@UseFirstForNewDay" />
            <SchedulerSlotsColumn SelectedIndex="@SelectedTimeSlot" IndexChanged="OnIndexChanged" CollectionChanged="OnScheduleChanged" tableName="Time slot" collection="@timeSlotCollection" InstanceType="typeof(TimeSlot)" />
            <SchedulerSlotsColumn SelectedIndex="@SelectedShift" IndexChanged="OnIndexChanged" CollectionChanged="OnScheduleChanged" tableName="Shift" collection="@shiftCollection" InstanceType="typeof(ShiftInfo)" />

        </div>
    </div>
</div>

@code {
    public bool UseFirstForNewDay;
    public bool UseFirstForNewWeek;

    private async Task OnScheduleChanged((List<dynamic> collection, string tableName) caller) 
    {
        if (CheckExistingSlotsWrong(caller.tableName))
        {
            return;
        }

        switch (caller.tableName){
            default:
                throw new NotImplementedException("No implemented collection handler");
            case "Week":
                ProblemScope.Problem.Schedule.Weeks = caller.collection.Cast<Week>().ToList();
                break;
            case "Day":
                ProblemScope.Problem.Schedule.Weeks[SelectedWeek].Days = caller.collection.Cast<Day>().ToList();
                break;
            case "Time slot":
                ProblemScope.Problem.Schedule.Weeks[SelectedWeek].Days[SelectedDay].TimeSlots = caller.collection.Cast<TimeSlot>().ToList();
                break;
            case "Shift":
                ProblemScope.Problem.Schedule.Weeks[SelectedWeek].Days[SelectedDay].TimeSlots[SelectedTimeSlot].Shifts = caller.collection.Cast<ShiftInfo>().ToList();
                break;
        }
        await ProblemScopeChanged.InvokeAsync(ProblemScope);
    }

    private async Task OnIndexChanged((int, string) indexCall)
    {
        switch (indexCall.Item2)
        {
            default:
                throw new NotImplementedException("No implemented handler");
            case "Week":
                SelectedWeek = indexCall.Item1;
                ProblemScope.SelectedWeek = SelectedWeek;
                break;
            case "Day":
                SelectedDay = indexCall.Item1;
                ProblemScope.SelectedDay = SelectedDay;
                break;
            case "Time slot":
                SelectedTimeSlot = indexCall.Item1;
                ProblemScope.SelectedTimeSlot = SelectedTimeSlot;
                break;
            case "Shift":
                SelectedShift = indexCall.Item1;
                ProblemScope.SelectedShift = SelectedShift;
                break;
        }
        await ProblemScopeChanged.InvokeAsync(ProblemScope);
    }



    private bool CheckExistingSlotsWrong(string tableName)
    {
        // check if the needed slots exist before trying to add one

        if (tableName != "Week")
        {
            if (SelectedWeek >= ProblemScope.Problem.Schedule.Weeks.Count) { Snackbar.Add("Add a week first", Severity.Warning); return true; }
            if (tableName != "Day")
            {
                if (SelectedDay >= ProblemScope.Problem.Schedule.Weeks[SelectedWeek].Days.Count) { Snackbar.Add("Add a day first", Severity.Warning); return true; }
                if (tableName != "Time slot")
                {
                    if (SelectedTimeSlot >= ProblemScope.Problem.Schedule.Weeks[SelectedWeek].Days[SelectedDay].TimeSlots.Count) { Snackbar.Add("Add a time slot first", Severity.Warning); return true; }
                }
            }
        }
        return false;
    }

    private int SelectedWeek = 0;
    private int SelectedDay = 0;
    private int SelectedTimeSlot = 0;
    private int SelectedShift = 0;

    List<dynamic> weekCollection = new();
    List<dynamic> dayCollection = new();
    List<dynamic> timeSlotCollection = new();
    List<dynamic> shiftCollection = new();


    [Parameter]
    public EventCallback<ProblemScope> ProblemScopeChanged { get; set; }

    [Parameter]
    public ProblemScope ProblemScope { get; set; } = default!;

    override protected void OnInitialized()
    {
        try { weekCollection = ProblemScope.Problem.Schedule.Weeks.Cast<dynamic>().ToList(); } catch { } // return;
        try { dayCollection = ProblemScope.Problem.Schedule.Weeks[SelectedWeek].Days.Cast<dynamic>().ToList(); } catch { }
        try { timeSlotCollection = ProblemScope.Problem.Schedule.Weeks[SelectedWeek].Days[SelectedDay].TimeSlots.Cast<dynamic>().ToList(); } catch { }
        try { shiftCollection = ProblemScope.Problem.Schedule.Weeks[SelectedWeek].Days[SelectedDay].TimeSlots[SelectedTimeSlot].Shifts.Cast<dynamic>().ToList(); } catch { }
    }
}
